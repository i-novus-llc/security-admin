<?xml version='1.0' encoding='UTF-8'?>
<object xmlns="http://n2oapp.net/framework/config/schema/object-2.0"
        xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-invocations-2.0">
    <name>Пользователи</name>

    <actions>
        <action id="create">
            <invocation>
                <n2o:java method="create" class="net.n2oapp.security.admin.api.service.UserService">
                    <n2o:spring/>
                    <n2o:arguments>
                        <n2o:argument name="userEntity" class="net.n2oapp.security.admin.api.model.UserForm"/>
                    </n2o:arguments>
                </n2o:java>
            </invocation>
            <in-parameters>
                <param name="username" mapping="[0].username" domain="string" required="true"/>
                <param name="email" mapping="[0].email" domain="string" required="true"/>
                <param name="surname" mapping="[0].surname" domain="string" required="${sec.admin.user.surname.input.required}"/>
                <param name="name" mapping="[0].name" domain="string" required="${sec.admin.user.name.input.required}"/>
                <param name="patronymic" mapping="[0].patronymic" domain="string"/>
                <param name="password" mapping="[0].password" domain="string" required="${sec.admin.user.password.input.required}"/>
                <param name="passwordCheck" mapping="[0].passwordCheck" domain="string"/>
                <param name="isActive" mapping="[0].isActive" domain="boolean" value="false"/>
                <param name="roles*.id" mapping="[0].roles" domain="integer[]" required="true"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="id"/>
            </out-parameters>
            <success-text>Пользователь сохранен</success-text>
            <validations activate="blackList">
                <validation ref-id="newPasswordLengthValidation"/>
            </validations>
        </action>

        <action id="update">
            <invocation>
                <n2o:java  method="update" class="net.n2oapp.security.admin.api.service.UserService">
                    <n2o:spring/>
                    <n2o:arguments>
                        <n2o:argument name="userEntity" class="net.n2oapp.security.admin.api.model.UserForm"/>
                    </n2o:arguments>
                </n2o:java>
            </invocation>
            <in-parameters>
                <param name="id" mapping="[0].id" domain="integer" required="true"/>
                <param name="guid" mapping="[0].guid" domain="string"/>
                <param name="username" mapping="[0].username" domain="string" required="true"/>
                <param name="email" mapping="[0].email" domain="string" required="true"/>
                <param name="surname" mapping="[0].surname" domain="string" required="${sec.admin.user.surname.input.required}"/>
                <param name="name" mapping="[0].name" domain="string" required="${sec.admin.user.name.input.required}"/>
                <param name="patronymic" mapping="[0].patronymic" domain="string"/>
                <param name="newPassword" mapping="[0].newPassword" domain="string"/>
                <param name="passwordCheck" mapping="[0].passwordCheck" domain="string"/>
                <param name="isActive" mapping="[0].isActive" domain="boolean" value="false"/>
                <param name="roles*.id" mapping="[0].roles" domain="integer[]" required="true"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="id"/>
            </out-parameters>
            <success-text>Пользователь сохранен</success-text>
            <validations activate="blackList">
                <validation ref-id="uniqueUsername"/>
            </validations>
        </action>

        <action id="delete">
            <invocation>
                <n2o:java method="delete" class="net.n2oapp.security.admin.api.service.UserService">
                    <n2o:spring/>
                    <n2o:arguments>
                        <n2o:argument name="id" class="java.lang.Integer"/>
                    </n2o:arguments>
                </n2o:java>
            </invocation>
            <in-parameters>
                <param name="id" mapping="[0]" domain="integer" required="true"/>
            </in-parameters>
            <confirmation-text>Вы уверены, что хотите удалить пользователя?</confirmation-text>
            <success-text>Пользователь удален</success-text>
            <validations activate="nothing"/>
        </action>

        <action id="changeUserActive">
            <invocation>
                <n2o:java method="changeActive" class="net.n2oapp.security.admin.api.service.UserService">
                    <n2o:arguments>
                        <n2o:argument name="id" class="java.lang.Integer"/>
                    </n2o:arguments>
                </n2o:java>
            </invocation>
            <in-parameters>
                <param name="id" mapping="[0]" domain="integer" required="true"/>
            </in-parameters>
            <success-text>Активность пользователя изменена!</success-text>
        </action>
    </actions>

    <validations>
        <constraint id="uniqueUsername" level="error">
            <message>Пользователь с таким именем уже существует</message>
            <invocation>
                <n2o:java method="checkUniqueUsername" class="net.n2oapp.security.admin.api.service.UserService">
                    <n2o:spring/>
                    <n2o:arguments>
                        <n2o:argument name="username" class="java.lang.String" type="class"/>
                    </n2o:arguments>
                </n2o:java>
            </invocation>
            <in-parameters>
                <param name="username" mapping="[0]" />
            </in-parameters>
            <result expression="#this == true"/>
        </constraint>

        <condition id="usernameValidation" level="error">
            <message>Неверное имя</message>
            <expression on="username">
                <![CDATA[(function(){
                    if (typeof username != 'undefined' && username != null && username != '') {
                        var regex = new RegExp('^[-_\\.a-zA-Z][-_\\.a-zA-Z0-9]+$');
                        return regex.test(username);
                     } else return true;
                     })()
                ]]>
            </expression>
        </condition>

        <condition id="emailValidation" level="error">
            <message>Неверный email</message>
            <expression on="email">
                <![CDATA[(function(){
                    if (typeof email != 'undefined' && email != null && email != '') {
                        var regex = new RegExp('[A-Za-z0-9!#$%&\'*+/=?^_`{|}~-]+(?:\\.[A-Za-z0-9!#$%&\'*+/=?^_`{|}~-]+)*@(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\\.)+[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?');
                        return regex.test(email);
                    } else return true;
                    })()
                ]]>
            </expression>
        </condition>

        <condition id="passwordValidation" level="error">
            <message>Неверный формат пароля</message>
            <expression on="password">
                <![CDATA[(function(){
                    if (typeof password != 'undefined' && password != null && password != '') {
                        var regex = new RegExp('(?=.*[0-9])(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!@#$%^&*]{6,}');
                        return regex.test(password);
                     } else return true;
                     })()
                ]]>
            </expression>
        </condition>

        <condition id="passwordLengthValidation" level="error">
            <message>Некорректная длина пароля</message>
            <expression on="password">
                <![CDATA[(function(){
                    if (typeof password != 'undefined' && password != null && password != '') {
                        return password.length >= ${sec.validation.password.length}
                     } else return true;
                  })()
                ]]>
            </expression>
        </condition>
        <condition id="newPasswordLengthValidation" level="error">
            <message>Некорректная длина пароля</message>
            <expression on="newPassword">
                <![CDATA[(function(){
                    if (typeof newPassword != 'undefined' && newPassword != null && newPassword != '') {
                        return newPassword.length >= ${sec.validation.password.length}
                     } else return true;
                  }())
                ]]>
            </expression>
        </condition>

        <condition id="passwordCheckValidation" level="error">
            <message>Введённые пароли не совпадают</message>
            <expression on="passwordCheck,password">
                <![CDATA[(function(){
                    if (typeof passwordCheck != 'undefined' && passwordCheck != null && passwordCheck != '' && typeof password != 'undefined' && password != null && password != '') {
                        return passwordCheck === password;
                     } else return true;
                   })()
                ]]>
            </expression>
        </condition>

        <condition id="newPasswordCheckValidation" level="error">
            <message>Введённые пароли не совпадают</message>
            <expression on="passwordCheck,newPassword">
                <![CDATA[(function(){
                    if (typeof newPassword != 'undefined' && newPassword != null && newPassword != '') {
                        return passwordCheck === newPassword;
                     } else return true;
                   })()
                ]]>
            </expression>
        </condition>
    </validations>
</object>





