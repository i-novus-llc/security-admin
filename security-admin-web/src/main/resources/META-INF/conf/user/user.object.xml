<?xml version='1.0' encoding='UTF-8'?>
<object xmlns="http://n2oapp.net/framework/config/schema/object-3.0" name="Пользователи">

    <operations>
        <operation id="create" success-text="Пользователь сохранен">
            <invocation>
                <java method="create" class="net.n2oapp.security.admin.api.service.UserService">
                    <spring/>
                    <arguments>
                        <argument name="userEntity" class="net.n2oapp.security.admin.api.model.UserForm"/>
                    </arguments>
                </java>
            </invocation>
            <in-parameters>
                <param id="username" mapping="[0].username" domain="string" required="true"/>
                <param id="email" mapping="[0].email" domain="string" required="true"/>
                <param id="surname" mapping="[0].surname" domain="string" required="${access.user.surname.required}"/>
                <param id="name" mapping="[0].name" domain="string" required="${access.user.name.required}"/>
                <param id="patronymic" mapping="[0].patronymic" domain="string"/>
                <param id="password" mapping="[0].password" domain="string" required="${access.user.password.input}"/>
                <param id="passwordCheck" mapping="[0].passwordCheck" domain="string"/>
                <param id="isActive" mapping="[0].isActive" domain="boolean" default-value="true"/>
                <param id="roles*.id" mapping="[0].roles" domain="integer[]" required="true"/>
                <param id="userLevel.id" mapping="[0].userLevel" domain="string"
                       mapping-condition="${access.level.enabled}"/>
                <param id="department.id" mapping="[0].departmentId" domain="integer"
                       mapping-condition="${access.level.enabled}"/>
                <param id="region.id" mapping="[0].regionId" domain="integer"
                       mapping-condition="${access.level.enabled}"/>
                <param id="organization.id" mapping="[0].organizationId" domain="integer"
                       mapping-condition="${access.level.enabled}"/>
            </in-parameters>
            <out-parameters>
                <param id="id" mapping="id"/>
            </out-parameters>
            <validations/>
        </operation>

        <operation id="update" success-text="Пользователь сохранен">
            <invocation>
                <java method="update" class="net.n2oapp.security.admin.api.service.UserService">
                    <spring/>
                    <arguments>
                        <argument name="userEntity" class="net.n2oapp.security.admin.api.model.UserForm"/>
                    </arguments>
                </java>
            </invocation>
            <in-parameters>
                <param id="id" mapping="[0].id" domain="integer" required="true"/>
                <param id="extUid" mapping="[0].extUid" domain="string"/>
                <param id="username" mapping="[0].username" domain="string" required="true"/>
                <param id="email" mapping="[0].email" domain="string" required="true"/>
                <param id="surname" mapping="[0].surname" domain="string" required="true"/>
                <param id="name" mapping="[0].name" domain="string" required="true"/>
                <param id="patronymic" mapping="[0].patronymic" domain="string"/>
                <param id="newPassword" mapping="[0].newPassword" domain="string"/>
                <param id="passwordCheck" mapping="[0].passwordCheck" domain="string"/>
                <param id="isActive" mapping="[0].isActive" domain="boolean" default-value="true"/>
                <param id="roles*.id" mapping="[0].roles" domain="integer[]" required="true"/>
                <param id="userLevel.id" mapping="[0].userLevel" domain="string"
                       mapping-condition="${access.level.enabled}"/>
                <param id="department.id" mapping="[0].departmentId" domain="string"
                       mapping-condition="${access.level.enabled}"/>
                <param id="region.id" mapping="[0].regionId" domain="string"
                       mapping-condition="${access.level.enabled}"/>
                <param id="organization.id" mapping="[0].organizationId" domain="string"
                       mapping-condition="${access.level.enabled}"/>
            </in-parameters>
            <out-parameters>
                <param id="id" mapping="id"/>
            </out-parameters>
            <validations/>
        </operation>

        <operation id="delete"
                   confirm-text="Вы уверены, что хотите удалить пользователя?"
                   success-text="Пользователь удален">
            <invocation>
                <java method="delete" class="net.n2oapp.security.admin.api.service.UserService">
                    <spring/>
                    <arguments>
                        <argument name="id" class="java.lang.Integer"/>
                    </arguments>
                </java>
            </invocation>
            <in-parameters>
                <param id="id" mapping="[0]" domain="integer" required="true"/>
            </in-parameters>
            <validations/>
        </operation>

        <operation id="changeUserActive" success-text="Активность пользователя изменена!">
            <invocation>
                <java method="changeActive" class="net.n2oapp.security.admin.api.service.UserService">
                    <spring/>
                    <arguments>
                        <argument name="id" class="java.lang.Integer"/>
                    </arguments>
                </java>
            </invocation>
            <in-parameters>
                <param id="id" mapping="[0]" domain="integer" required="true"/>
            </in-parameters>
        </operation>
    </operations>

    <validations>
        <condition id="usernameValidation" severity="danger" message="Неверное имя" on="username">
            <![CDATA[
                    if (typeof username != 'undefined' && username != null && username != '') {
                        var regex = new RegExp('${sec.validation.username.regexp}');
                        return regex.test(username);
                     } else return true;
                ]]>
        </condition>

        <condition id="emailValidation" severity="danger" message="Неверный email" on="email">
                <![CDATA[
                if (typeof email != 'undefined' && email != null && email != '') {
	                var regex = new RegExp('${sec.validation.email.regexp}');
                    return regex.test(email);
                } else return true;
                ]]>
        </condition>

        <condition id="passwordValidation" severity="danger" on="password"
                   message="Неверный формат пароля" field-id="password">
                <![CDATA[
                    if (typeof password != 'undefined' && password != null && password != '') {
                        var regex = new RegExp('${sec.validation.password.regexp}');
                        return regex.test(password);
                    } else return true;
                ]]>
        </condition>

        <condition id="newPasswordValidation" severity="danger" on="newPassword"
                   message="Неверный формат пароля" field-id="newPassword">
            <![CDATA[
                    if (typeof newPassword != 'undefined' && newPassword != null && newPassword != '') {
                        var regex = new RegExp('${sec.validation.password.regexp}');
                        return regex.test(newPassword);
                    } else return true;
                ]]>
        </condition>

        <condition id="passwordLengthValidation" severity="danger"
                   on="password" field-id="password"
                   message="Некорректная длина пароля">
                <![CDATA[
                    if (typeof password != 'undefined' && password != null && password != '') {
                        return password.length >= ${sec.validation.password.length}
                     } else return true;
                ]]>
        </condition>
        <condition id="newPasswordLengthValidation" severity="danger"
                   on="newPassword" field-id="newPassword"
                   message="Некорректная длина пароля">
                <![CDATA[
                    if (typeof newPassword != 'undefined' && newPassword != null && newPassword != '') {
                        return newPassword.length >= ${sec.validation.password.length}
                     } else return true;
                ]]>
        </condition>

        <condition id="passwordCheckValidation" severity="danger"
                   on="passwordCheck,password" field-id="passwordCheck"
                   message="Введённые пароли не совпадают">
                <![CDATA[
                    if (typeof password != 'undefined' && password != null && password != ''
                      && typeof passwordCheck != 'undefined') {
                        return passwordCheck === password;
                     } else return true;
                ]]>
        </condition>

        <condition id="newPasswordCheckValidation" severity="danger"
                   on="passwordCheck,newPassword" field-id="passwordCheck"
                   message="Введённые пароли не совпадают">
                <![CDATA[
                    if (typeof newPassword != 'undefined' && newPassword != null && newPassword != ''
                      && typeof passwordCheck != 'undefined') {
                        return passwordCheck === newPassword;
                     } else return true;
                ]]>
        </condition>
    </validations>
</object>





