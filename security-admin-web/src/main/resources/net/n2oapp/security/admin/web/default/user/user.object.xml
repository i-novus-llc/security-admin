<?xml version='1.0' encoding='UTF-8'?>
<object xmlns="http://n2oapp.net/framework/config/schema/object-4.0"
        name="Пользователи">

    <operations>
        <operation id="create" success-text="Данные о пользователе сохранены">
            <invocation>
                <java method="create" class="net.n2oapp.security.admin.api.service.UserService">
                    <spring/>
                    <arguments>
                        <argument name="userEntity" class="net.n2oapp.security.admin.api.model.UserForm" type="class"/>
                    </arguments>
                </java>
            </invocation>
            <in>
                <field id="username" mapping="[0].username" domain="string" required="true"/>
                <field id="email" mapping="[0].email" domain="string" required="${access.user.email-required}"/>
                <field id="surname" mapping="[0].surname" domain="string" required="${access.user.surname.required}"/>
                <field id="name" mapping="[0].name" domain="string" required="${access.user.name.required}"/>
                <field id="patronymic" mapping="[0].patronymic" domain="string"/>
                <field id="password" mapping="[0].password" domain="string" required="${access.user.password.input}"/>
                <field id="passwordCheck" mapping="[0].passwordCheck" domain="string"/>
                <field id="temporaryPassword" mapping="[0].temporaryPassword" domain="string"
                       required="${access.user.password.generate}"/>
                <field id="sendOnEmail" mapping="[0].sendOnEmail" domain="boolean"
                       normalize="#this != null ? #this : ${access.user.choice-send-password}"/>
                <field id="isActive" mapping="[0].isActive" domain="boolean" default-value="true"/>
                <field id="snils" mapping="[0].snils" domain="string"/>
            </in>
            <out>
                <field id="id" mapping="id"/>
            </out>
            <validations/>
        </operation>
        <operation id="update" success-text="Данные о пользователе сохранены">
            <invocation>
                <java method="update" class="net.n2oapp.security.admin.api.service.UserService">
                    <spring/>
                    <arguments>
                        <argument name="userEntity" class="net.n2oapp.security.admin.api.model.UserForm" type="class"/>
                    </arguments>
                </java>
            </invocation>
            <in>
                <field id="id" mapping="[0].id" domain="integer" required="true"/>
                <field id="username" mapping="[0].username" domain="string" required="true"/>
                <field id="email" mapping="[0].email" domain="string" required="${access.user.email-required}"/>
                <field id="surname" mapping="[0].surname" domain="string" required="true"/>
                <field id="name" mapping="[0].name" domain="string" required="true"/>
                <field id="patronymic" mapping="[0].patronymic" domain="string"/>
                <field id="password" mapping="[0].password" domain="string"/>
                <field id="passwordCheck" mapping="[0].passwordCheck" domain="string"/>
                <field id="isActive" mapping="[0].isActive" domain="boolean" default-value="true"/>
                <field id="snils" mapping="[0].snils" domain="string"/>
            </in>
            <out>
                <field id="id" mapping="id"/>
            </out>
            <validations/>
        </operation>

        <operation id="delete" success-text="Пользователь удален">
            <invocation>
                <java method="delete" class="net.n2oapp.security.admin.api.service.UserService">
                    <spring/>
                    <arguments>
                        <argument name="id" class="java.lang.Integer"/>
                    </arguments>
                </java>
            </invocation>
            <in>
                <field id="id" mapping="[0]" domain="integer" required="true"/>
            </in>
            <validations black-list="usernameValidation"/>
        </operation>

        <operation id="changeUserActive" success-text="Активность пользователя изменена!">
            <invocation>
                <java method="changeActive" class="net.n2oapp.security.admin.api.service.UserService">
                    <spring/>
                    <arguments>
                        <argument name="id" class="java.lang.Integer"/>
                    </arguments>
                </java>
            </invocation>
            <in>
                <field id="id" mapping="[0]" domain="integer" required="true"/>
            </in>
        </operation>

        <operation id="resetPassword" success-text="Пароль сброшен">
            <invocation>
                <java method="resetPassword" class="net.n2oapp.security.admin.api.service.UserService">
                    <spring/>
                    <arguments>
                        <argument name="userEntity" class="net.n2oapp.security.admin.api.model.UserForm" type="class"/>
                    </arguments>
                </java>
            </invocation>
            <in>
                <field id="id" mapping="[0].id" domain="integer" required="true"/>
                <field id="username" mapping="[0].username" domain="string" required="!${access.email-as-username}"/>
                <field id="email"
                       mapping="[0].email"
                       domain="string"
                       required="${access.user.email-required} || ${access.email-as-username}"/>
                <field id="password" mapping="[0].password" domain="string" required="${access.user.password.input}"/>
                <field id="passwordCheck" mapping="[0].passwordCheck" domain="string"/>
                <field id="temporaryPassword" mapping="[0].temporaryPassword" domain="string"
                       required="${access.user.password.generate}"/>
                <field id="sendOnEmail" mapping="[0].sendOnEmail" domain="boolean"
                       normalize="#this != null ? #this : ${access.user.choice-send-password}"/>
            </in>
            <validations/>
        </operation>
    </operations>

    <validations>
        <condition id="usernameValidation" severity="danger" message="Неверное имя" on="username">
            <![CDATA[
                    if (${access.email-as-username})
                        return true;
                    if (typeof username != 'undefined' && username != null && username != '') {
                        var regex = new RegExp('${access.user.username.regexp}');
                        return regex.test(username);
                     } else return true;
                ]]>
        </condition>

        <condition id="emailValidation" severity="danger" message="Неверный email" on="email">
            <![CDATA[
                if (typeof email != 'undefined' && email != null && email != '') {
	                var regex = new RegExp('${access.user.email.regexp}');
                    return regex.test(email);
                } else return true;
                ]]>
        </condition>

        <condition id="passwordCorrectSymbolsValidation" severity="danger" on="password"
                   message="Пароль содержит некорректные символы" field-id="password">
            <![CDATA[
                    if (typeof password != 'undefined' && password != null && password != '') {
                        var regex = new RegExp('^[0-9a-zA-Z@%+\\\\/\'!#$^?:,(){}[\\]~\\-_.]+$');
                        return regex.test(password)
                    } else return true;
                ]]>
        </condition>

        <condition id="passwordLowerCaseValidation" severity="danger" on="password"
                   message="Отсутствуют строчные буквы" field-id="password">
            <![CDATA[
                    if (typeof password != 'undefined' && password != null && password != '' &&
                    ${access.password.lower-case-required}) {
                        var regex = new RegExp('.*[a-z].*');
                        return regex.test(password);
                    } else return true;
                ]]>
        </condition>

        <condition id="passwordUpperCaseValidation" severity="danger" on="password"
                   message="Отсутствуют прописные буквы" field-id="password">
            <![CDATA[
                    if (typeof password != 'undefined' && password != null && password != '' &&
                    ${access.password.upper-case-required}) {
                        var regex = new RegExp('.*[A-Z].*');
                        return regex.test(password);
                    } else return true;
                ]]>
        </condition>

        <condition id="passwordDigitsValidation" severity="danger" on="password"
                   message="Отсутствуют цифры" field-id="password">
            <![CDATA[
                    if (typeof password != 'undefined' && password != null && password != '' &&
                    ${access.password.numbers-required}) {
                        var regex = new RegExp('.*[0-9].*');
                        return regex.test(password);
                    } else return true;
                ]]>
        </condition>

        <condition id="passwordSpecialSymbolsValidation" severity="danger" on="password"
                   message="Отсутствуют спецсимволы" field-id="password">
            <![CDATA[
                    if (typeof password != 'undefined' && password != null && password != '' &&
                    ${access.password.special-symbols-required}) {
                        var regex = new RegExp('.*[@%+\\\\/\'!#$^?:,(){}[\\]~\\-_.].*');
                        return regex.test(password);
                    } else return true;
                ]]>
        </condition>

        <condition id="passwordLengthValidation" severity="danger"
                   on="password" field-id="password"
                   message="Некорректная длина пароля">
            <![CDATA[
                    if (typeof password != 'undefined' && password != null && password != '') {
                        return password.length >= ${access.password.length}
                     } else return true;
                ]]>
        </condition>

        <condition id="passwordCheckValidation" severity="danger"
                   on="passwordCheck,password" field-id="passwordCheck"
                   message="Введённые пароли не совпадают">
            <![CDATA[
                    if (typeof password != 'undefined' && password != null && password != ''
                      && typeof passwordCheck != 'undefined') {
                        return passwordCheck === password;
                     } else return true;
                ]]>
        </condition>

        <condition id="snilsValidation" severity="danger" on="snils" field-id="snils"
                   message="СНИЛС не соответвствует формату">
            <![CDATA[
                    if(typeof snils == 'undefined' || snils == null || snils == ''){
                        return true;
                    }

                    var snilsNoCheckSum = snils.slice(0,3) +  snils.slice(4,7) + snils.slice(8,11);
                    var checksum = Number (snils.slice(12,14));
                    var sum = 0;
                    if((snilsNoCheckSum) > 1001998){
                       var multiplier = 9;
                       for (var i = 0; i < 9; i++) {
                          sum = sum + (multiplier - i) * (snilsNoCheckSum[i]);
                       }

                      if(sum > 101) sum = sum % 101;
                      if(sum < 100) return sum == checksum;
                      if(sum == 100 || sum == 101) return 0 == checksum;
                    }
                    return true;
                ]]>
        </condition>
    </validations>
</object>





