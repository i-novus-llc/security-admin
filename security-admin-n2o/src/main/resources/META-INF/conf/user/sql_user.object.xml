<?xml version='1.0' encoding='UTF-8'?>
<object xmlns="http://n2oapp.net/framework/config/schema/object-1.0"
        xmlns:n2o="http://n2oapp.net/framework/config/schema/action-invocation-1.0">
    <name>Пользователь</name>

    <actions>
        <action id="create">
            <invocation>
                <n2o:java-method name="create" bean="jdbcUserService">
                    <n2o:arguments>
                        <n2o:argument name="userEntity" class="net.n2oapp.security.admin.model.User" />
                    </n2o:arguments>
                </n2o:java-method>
            </invocation>
            <in-parameters>
                <param name="username" mapping="[0].username" domain="string" required="true"/>
                <param name="email" mapping="[0].email" domain="string" required="true"/>
                <param name="surname" mapping="[0].surname" domain="string" required="true"/>
                <param name="name" mapping="[0].name" domain="string" required="true"/>
                <param name="patronymic" mapping="[0].patronymic" domain="string"/>
                <param name="isActive.id" mapping="[0].isActive" domain="boolean" value="false"/>
                <param name="roles*.id" mapping="[0].roleIds" domain="integer[]" />
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="id"/>
            </out-parameters>
            <success-text>Пользователь сохранен</success-text>
        </action>

        <action id="update">
            <invocation>
                <n2o:java-method name="update" bean="jdbcUserService">
                    <n2o:arguments>
                        <n2o:argument name="userEntity" class="net.n2oapp.security.admin.model.User" />
                    </n2o:arguments>
                </n2o:java-method>
            </invocation>
            <in-parameters>
                <param name="id" mapping="[0].id" domain="integer" required="true"/>
                <param name="username" mapping="[0].username" domain="string" required="true"/>
                <param name="email" mapping="[0].email" domain="string" required="true"/>
                <param name="surname" mapping="[0].surname" domain="string" required="true"/>
                <param name="name" mapping="[0].name" domain="string" required="true"/>
                <param name="patronymic" mapping="[0].patronymic" domain="string"/>
                <param name="isActive.id" mapping="[0].isActive" domain="boolean" value="false"/>
                <param name="roles*.id" mapping="[0].roleIds" domain="integer[]" />
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="id"/>
            </out-parameters>
            <success-text>Пользователь сохранен</success-text>
        </action>

        <action id="delete">
            <invocation>
                <n2o:java-method name="delete" bean="jdbcUserService">
                    <n2o:arguments>
                        <n2o:argument name="id" class="java.lang.Integer" />
                    </n2o:arguments>
                </n2o:java-method>
            </invocation>
            <in-parameters>
                <param name="id" mapping="[0]" domain="integer" required="true"/>
            </in-parameters>
            <confirmation-text>Вы уверены, что хотите удалить пользователя?</confirmation-text>
            <success-text>Пользователь удален</success-text>
        </action>
    </actions>

    <validations>
        <condition id="username" level="error">
            <message>Неверное имя</message>
            <expression on="username">
                (username == null || username == 'undefined' || username == '' || new RegExp('[a-zA-Z0-9]+').test(username));
            </expression>
        </condition>

        <condition id="emailValidation" level="error">
            <message>Неверный email</message>
            <expression on="email">
                <![CDATA[
                if (typeof email != 'undefined' && email != null && email != '') {
                    var regex = new RegExp('[a-z0-9!#$%&\'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&\'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?');
                    regex.test(email);
                } else true;
                ]]>
            </expression>
        </condition>
    </validations>
</object>
